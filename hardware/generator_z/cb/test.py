import random
import argparse
from bit_vector import BitVector

import magma as m

parser = argparse.ArgumentParser(description="Test the connection box")

parser.add_argument("--genesis-verilog",
                    help="Verilog file generated by genesis")

args = parser.parse_args()

genesis_cb = m.DeclareFromVerilogFile(args.genesis_verilog)[0]
# cb(clk: In(Bit), reset: In(Bit), in_0: Array(16,In(Bit)), in_1:
# Array(16,In(Bit)) , in_2: Array(16,In(Bit)), in_3: Array(16,In(Bit)), in_4:
# Array(16,In(Bit)), in_6 : Array(16,In(Bit)), in_7: Array(16,In(Bit)), in_8:
# Array(16,In(Bit)), in_9: Arra y(16,In(Bit)), out: Array(16,Out(Bit)),
# config_addr: Array(32,In(Bit)), config_da ta: Array(32,In(Bit)), config_en:
# In(Bit), read_data: Array(32,Out(Bit)))

data_width = None

inputs = []
for port in genesis_cb.interface:
    if port[:3] == "in_":
        inputs.append(port)
        port_width = len(genesis_cb.interface.ports[port])
        if data_width is None:
            data_width = port_width
        else:
            assert data_width == port_width

testvectors = []

# config_addr = 0
# config_data = 0

GND = BitVector(0, 1)
VCC = BitVector(0, 1)
# Config logic
ins = [GND for _ in range(len(inputs))]
reset = VCC
config_addr = GND
config_data = GND
config_en = GND
out = GND
read_data = GND
vector = [reset] + ins + [out, config_addr, config_data, config_en, read_data]
# Twiddle the clock 3 times
for i in range(3):
    testvectors.append([BitVector(i % 2, 1)] + vector)


ins = [BitVector(random.randint(0, (1 << data_width) - 1), data_width)
       for _ in range(len(inputs))]
reset = VCC
clk = GND
config_addr = BitVector(random.randint(0, 1 << 31), 32)
config_data = BitVector(random.randint(0, 1 << 31), 32)
config_en = GND
out = ins[0]
vector = [clk, reset] + ins + [out, config_addr, config_data, config_en, read_data]
testvectors.append(vector)
print(testvectors)

from magma.testing.verilator import compile, run_verilator_test
compile("build/test.cpp", genesis_cb, testvectors)
import shutil
shutil.copy(args.genesis_verilog, "build")
run_verilator_test(genesis_cb.name, "test", genesis_cb.name, ["-Wno-fatal"])
