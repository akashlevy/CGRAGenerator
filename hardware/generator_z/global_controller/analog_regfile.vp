//; use POSIX;
/********************************************************************
Control Registers for analog stuff in CGRA
********************************************************************/

//; my $data_width = parameter(name => 'data_width', val => 32, min => 1, step => 1);
//; my $num_regs = parameter(name => 'num_regs', val => 16, min => 1, step => 1);
//; my $addr_width = parameter(name => 'addr_width', val => 32, min => 1, step => 1);

module `mname` (
addr,
data_in,
wr_en,
//; for(my $i = 0; $i < $num_regs; $i++){
r`$i`,
//;}
clk,
reset
);

input clk;
input reset;
input wr_en;
input [`$addr_width-1`:0] addr;
input [`$data_width-1`:0] data_in;
//; for(my $i = 0; $i < $num_regs; $i++){
output reg [`$data_width-1`:0] r`$i`;
//;}

always @ (posedge clk or posedge reset) begin
	if(reset==1) begin
//; for(my $i=0; $i < $num_regs; $i++){
		r`$i` <= `$data_width`'b0;
//; }
	end //if reset
	else if(wr_en == 1) begin
		case(addr)
//; for(my $i=0; $i < $num_regs; $i++){
			`$addr_width`'d`$i`: begin
				r`$i` <= data_in;
			end
//; }
		endcase

	end //else	
end //always


endmodule
