//; use POSIX;
//; my $dummy_value = parameter(Name=>'dummy_value', val=> 0, doc=>'dummy value. placeholder.'); 

module `mname` (
clk_in, reset_in,
config_addr_in,
config_data_in,
config_addr_out,
config_data_out,
clk_out,
reset_out,
tdi,
tdo,
tms,
tck
);
  
  input  tck;
  input  clk_in;
  input  reset_in;
  input  tdi;
  input  tms;
  input [31:0] config_addr_in;
  input [31:0] config_data_in;

  output reg [31:0] config_addr_out;
  output reg [31:0] config_data_out;
  output reg clk_out;
  output reg reset_out;
  output tdo;

  wire [31:0] config_addr_jtag_out;
  wire [31:0] config_data_jtag_out;
//; my $jtag_obj = generate("jtag", "jtag_controller");
//; my $jtag_ifc_path = $jtag_obj -> get_param('IFC');
//; my $jtag_ifc = clone($jtag_ifc_path, 'jtag_ifc');
`$jtag_ifc -> instantiate` (.Clk(clk_in), .Reset(reset_in));
`jtag_obj -> instantiate` (.ifc(`$jtag_ifc->iname()`);
    (
      assign `$jtag_ifc->iname()`.tdi(tdi);
      assign `$jtag_ifc->iname()`.tdo(tdo);
      assign `$jtag_ifc->iname()`.tms(tms);
      assign `$jtag_ifc->iname()`.config_addr_to_gc(config_addr_jtag_out);
      assign `$jtag_ifc->iname()`.config_data_to_gc(config_data_jtag_out);
      assign `$jtag_ifc->iname()`.config_data_from_gc(config_data_in);
      assign `$jtag_ifc->iname()`.trst_n(trst_n);
      assign `$jtag_ifc->iname()`.tck(tck); 
    );
  always @(*) begin
    config_addr_out = config_addr_in;
    config_data_out = config_data_in;
    clk_out = clk_in;
    reset_out = reset_in;
  end
endmodule
