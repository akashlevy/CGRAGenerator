/* *****************************************************************************
 * File: test.v
 * Author: Ofer Shacham
 * 
 * Description:
 * simple test bench for template
 * 
 *
 * Change bar:
 * -----------
 * Date          Author   Description
 * Apr 3, 2010  shacham  initial version
 *  
 * 
 * ****************************************************************************/

////////////////////////////// IMPORTANT MESSAGE: //////////////////////////////
// Note that programs are written using object oriented programming. They
// are closer to software than to hardware. There is therefore no real need
// in a genesis type parameterization.
////////////////////////////////////////////////////////////////////////////////

program automatic `mname`(interface ifc);
   
   // some variables to control the test
   int                           seed;
   int                           rnd0;
   int 				 fd;
   
   // Instantiate a jtag driver
   //; my $jtag_drvr_obj = generate_base('JTAGDriver', 'jdrv');
   `$jtag_drvr_obj->instantiate`;
   jtag_regfile_trans_t jtag_ofst_trans, jtag_rslt_trans;
         
   /*******************************************************************************
    * The Test Sequence: configure the analog block and read the result
    *   #	Offset Pos_in     Neg_in      Out
    *   1	0      0.1V-4mV   0.1+4mV     0
    *   2	0      0.1V-2mV   0.1V+2mV    1
    *   3	0      0.1V	  0.1V	      1
    *   4	0      0.1V+2mV   0.1V-2mV    1
    *   	       	   	       
    *   5	6      0.1V-4mV   0.1+4mV     0
    *   6	6      0.1V-2mV   0.1V+2mV    0
    *   7	6      0.1V	  0.1V	      0
    *   8	6      0.1V+2mV   0.1V-2mV    0
    *   9	6      0.1V+4mV   0.1V-4mV    1
    * ****************************************************************************/
   task run_test;
      begin
	 jdrv.ReadID(jtag_ofst_trans);
	 
	 // initialization of structs:
	 jtag_ofst_trans.domain = sc_domain;
	 jtag_ofst_trans.addr = 18'h400; // first reg in second sys-clock regfile
	 jtag_ofst_trans.op = write;
	 jtag_ofst_trans.data_out = '0;
	 
	 jtag_rslt_trans.domain = sc_domain;
	 jtag_rslt_trans.addr = 18'h408; // since the bus is 48 bits, addresses jump by 8 bytes
	 jtag_rslt_trans.op = read;
	 jtag_rslt_trans.data_in = 0;

	 
	 @(posedge ifc.Clk);
	 jtag_ofst_trans.data_in = 0;
	 jtag_ofst_trans.done = 0;
	 jdrv.Send(jtag_ofst_trans);
	 ifc.cmp_pos_in = 0.096;
	 ifc.cmp_neg_in = 0.104;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 1: offset=0, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);
	 
	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.098;
	 ifc.cmp_neg_in = 0.102;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 2: offset=0, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);
	 
	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.100;
	 ifc.cmp_neg_in = 0.100;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 3: offset=0, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);

	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.102;
	 ifc.cmp_neg_in = 0.098;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 4: offset=0, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);

	 @(posedge ifc.Clk);
	 jtag_ofst_trans.data_in = 6;
	 jtag_ofst_trans.done = 0;
	 jdrv.Send(jtag_ofst_trans);
	 ifc.cmp_pos_in = 0.096;
	 ifc.cmp_neg_in = 0.104;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 5: offset=6, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);

	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.098;
	 ifc.cmp_neg_in = 0.102;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 6: offset=6, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);

	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.1;
	 ifc.cmp_neg_in = 0.1;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 7: offset=6, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);

	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.102;
	 ifc.cmp_neg_in = 0.098;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 8: offset=6, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);

	 @(posedge ifc.Clk);
	 ifc.cmp_pos_in = 0.104;
	 ifc.cmp_neg_in = 0.096;

	 jtag_rslt_trans.data_out = 0;
	 jtag_rslt_trans.done = 0;
	 jdrv.Send(jtag_rslt_trans);
	 jtag_rslt_trans = jdrv.GetResult();
	 $fdisplay(fd,"%t: %m: Trans 9: offset=6, pos=%f, neg=%f, output=%0x",  
		   $time, ifc.cmp_pos_in, ifc.cmp_neg_in, jtag_rslt_trans.data_out);
      end
   endtask // run_test



   /****************************************************************************
    * Control the simulation
    * *************************************************************************/
   initial begin
      $display("%t:\t********************Loading Arguments***********************",$time);
      init_test;
      fd = $fopen("test.log","w");
      
      $display("%t:\t*************************START*****************************",$time);
      @(negedge ifc.Reset);
      repeat (10) @(posedge ifc.Clk);
      run_test;
      repeat (10) @(posedge ifc.Clk);
      $display("%t:\t*************************FINISH****************************",$time);
      $fclose(fd);
      $finish(2);
   end
   
   
   task init_test();
      begin
	 // read user input
	 ProcessArgs();
	 rnd0 = $random(seed); // initial the random number generator
	 
	 // init the environment
	 jdrv = new(ifc);
	 jdrv.Zero();
	 
	 ifc.signalA_in = '0;
	 ifc.signalD_in = '0;
	 ifc.cmp_Iref_in = 0;
	 ifc.cmp_pos_in = 0;
	 ifc.cmp_neg_in = 0;
	 repeat (2) @(posedge ifc.Clk); 
      end
   endtask // init_test
   
   /****************************************************************************
    * Other Tasks:
    * *************************************************************************/
   task ProcessArgs;
      begin
         // if this is a "+wave" run, it must record all signals
         if ( $test$plusargs("wave") ) begin
            //         levels  instance
            $display("time=%10t Starting Wave Capture", $time);
            $vcdpluson(0,        top);
         end
         // if this is a "+memwave" run, it must record all memories
         if ( $test$plusargs("memwave") ) begin
            //         levels  instance
            $display("time=%10t Starting Memories Capture", $time);
            CaptureMemoriesOn();
         end
         // find the seed for this run
         if ( $test$plusargs("seed") ) begin
	    $value$plusargs("seed=%d", seed);
	 end else begin
            seed = 12345;
         end
	 $display("%t: Using seed %d",$time, seed);
      end
   endtask // ProcessArgs
   
   task CaptureMemoriesOn;
      begin
         $vcdplusmemon(0,        top);
      end
   endtask // CaptureMemoriesOn
   
   task CaptureMemoriesOff;
      begin
         $vcdplusmemoff(0,        top);
      end
   endtask // CaptureMemoriesOff
   
endprogram : `mname`
  