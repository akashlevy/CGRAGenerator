//; use POSIX;
//; my $side = parameter(Name=>'side', value=>'N', Doc=>"Which side of the chip are we on?", List=>['N','S','E','W']);
//; my $io_group_num = parameter(Name=>'io_group_num', value=>0); 
//; my $num_ios = parameter(Name=>'num_ios', value=>16,Min=>1,Step=>1);
//; my $config_addr_width = parameter(Name=>'config_addr_width', val=>32, min=>1, step =>1);
//; my $config_data_width = parameter(Name=>'config_data_width', val=>32, min=>1, step =>1);
//; my $tile_id_offset = parameter(Name=>'tile_id_offset', val=>0, doc=>'First tile_id to assign');
//; my $tile_id_incr = parameter(Name=>'tile_id_incr', val=> 1, doc=>'How much should we increment the tile_id by for each io tile instance');
//; # This is to convert the direction to a side number that the rest of CGRAGenerator uses
//; my %side_to_side_num = ('N',3,  'S',1,  'E',0,  'W',2);

// io group `$io_group_num`

module `mname` (
input clk,
input reset,
input [`$config_data_width-1`:0] config_data,
input [`$config_addr_width-1`:0] config_addr,
input config_read,
input config_write,
input [`$num_ios-1`:0] f2p_wide,
input [`$num_ios-1`:0] f2p_1bit,
inout [`$num_ios-1`:0] pads,
output [`$num_ios-1`:0] p2f,
output reg [`$config_data_width-1`:0] read_data
);

wire [`$config_data_width-1`:0] read_data_tile [`$num_ios-1`:0];


//; my $io1bit_obj = generate("io1bit", "io1bit_0", side=>$side_to_side_num{$side}, io_group=>$io_group_num);

//; for (my $i=0; $i < $num_ios; $i++) {
//; 
//;   print "// $i";
//;   my $filename = "TILE".$self->mname();
//;   open(TILEINFO, ">>$filename") or die "Couldn't open file $filename, $!";
//;   print TILEINFO "foo";
//;   close TILEINFO;
//; }

//; for (my $i=0; $i < $num_ios; $i++) {
  `$io1bit_obj->instantiate()` (
);
//; 
//;   $io1bit_obj = clone($io1bit_obj, "io1bit_@{[$i+1]}");
//; }

// SV equivalent: assign read_data = read_data_tile.or();
always @(*) begin
  read_data = 0;
  for (integer i=0; i < `$num_ios`; i++)
    read_data = read_data | read_data_tile[i];
end

endmodule
