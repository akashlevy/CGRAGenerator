//; my $use_add   = parameter(Name=>'use_add', val=> 2, List=>[2, 1, 0], doc=>'0 - no adders, 1 - simple ADDs, 2 - SAD');
//; my $use_cntr  = parameter(Name=>'use_cntr', val=> 1, List=>[1, 0],  doc=>'0 - no counter mode, 1 - enable counter mode');
//; my $use_bool  = parameter(Name=>'use_bool', Val=>1, List=>[1, 0], Doc=>"0 - no booleans, 1 - simple gates");
//; my $use_shift = parameter(Name=>'use_shift', val=> 1, List=>[1, 0], doc=>'Use shift operations');
//; my $mult_mode = parameter(Name=>'mult_mode', val=> 2, List=>[2, 1, 0], doc=>'Use MAD(2) or MULT(1) or None(0)');
//; my $use_div   = parameter(Name=>'use_div', val=> 1, List=>[1, 0],  doc=>'0 - no divide, 1 - enable iterrative divide');
//;
//;
//; my $is_msb = parameter(Name=>'is_msb', val=> 0, List=>[1, 0], doc=>'1 - MSB in 32b mode, 0 - LSB result');
//; my $en_double = parameter(Name=>'en_double', val=> 1, List=>[1, 0], doc=>'1 - 32b supported, 0 - No 32b support');
//;
//; my $debug = $self->parameter(name=>'debug', val=> 0, List=>[1, 0], doc=>'Generate extra code for debug');
//;
//; my $use_sad  = $use_add > 1;
//;
//; my $use_c_input = ($use_sad > 0 || $mult_mode > 1);
module   `mname`  #(
  parameter DataWidth = 16
) (
  input [8:0]                   op_code,

  input  [DataWidth-1:0]        op_a,
//; if($use_shift) {
  input  [DataWidth-1:0]        op_a_shift,
//;}
  input  [DataWidth-1:0]        op_b,
//; if($use_c_input) {
  input  [DataWidth-1:0]        op_c,
//;}
  input                         op_d_p,

//; if($use_add > 0) {
//;   if($en_double & $is_msb) {
  input [`$use_add -1`:0]       carry_in,
  input                         cmpr_eq_in,
//;   } elsif($en_double) {
  input                         res_p_msb,
  output [`$use_add -1`:0]      carry_out,
  output                        cmpr_eq_out,
//;   }
//; }
//; if($use_cntr) {
  output logic [DataWidth-1:0]  cntr_next,
  output                        cntr_en,
//;}
//; if($use_div) {
//;   if($is_msb) {
  input        [1:0]           div_low_msb,
//;   } elsif(!$en_double) {
  input                         res_p_msb,
//;   }
  input        [DataWidth-1:0] div_ci,
  output logic [DataWidth-1:0] div_co,
//;}

  output [DataWidth-1:0]  res,
//; if($en_double & $mult_mode > 0) {
  output [2*DataWidth-1:0] mult_res,
//;}
  output                  res_p
);

localparam DATA_MSB = DataWidth - 1;

localparam PE_ADD_OP     = 6'h0;
localparam PE_SUB_OP     = 6'h1;

localparam PE_ABS_OP     = 6'h3;

localparam PE_GTE_MAX_OP = 6'h4;
localparam PE_LTE_MIN_OP = 6'h5;
localparam PE_EQ_OP      = 6'h6;

localparam PE_SEL_OP     = 6'h8;

localparam PE_RSHFT_OP   = 6'hF;
localparam PE_RSHFT_S_OP = 6'h10;
localparam PE_LSHFT_OP   = 6'h11;

localparam PE_MULT_0_OP  = 6'hB;
localparam PE_MULT_1_OP  = 6'hC;
localparam PE_MULT_2_OP  = 6'hD;

localparam PE_OR_OP      = 6'h12;
localparam PE_AND_OP     = 6'h13;
localparam PE_XOR_OP     = 6'h14;
localparam PE_INV_OP     = 6'h15;

localparam PE_CNTR_OP    = 6'h18;

localparam PE_DIV_OP    = 6'h19;

//; if(($en_double==0) &$mult_mode > 0) {
logic [2*DataWidth-1:0] mult_res;
//;}


logic [DataWidth-1:0] res_w;
logic                 res_p_w;

logic                 is_signed;
logic                 dual_mode;
logic                 double_mode;

logic                 cmpr_lte;
logic                 cmpr_gte;
logic                 cmpr_eq;


//;
//;
//; if($use_add > 0) {
localparam NUM_ADDERS = `$use_add`;
localparam ADD_MSB = NUM_ADDERS - 1;

logic [DataWidth-1:0]  add_a     [ADD_MSB:0];
logic [DataWidth-1:0]  add_b     [ADD_MSB:0];
logic                  add_c_in  [ADD_MSB:0];

logic [DataWidth-1:0]  add_res   [ADD_MSB:0];
logic                  add_c_out [ADD_MSB:0];



genvar ggg;

generate
  for(ggg=0;ggg<NUM_ADDERS;ggg=ggg+1) begin
//; my $full_add = generate_base('test_full_add', 'full_add');
  `$full_add->mname()` #(.DataWidth(DataWidth)) `$full_add->iname()`
    (
      .a     (add_a[ggg]),
      .b     (add_b[ggg]),
      .c_in  (add_c_in[ggg]),

//      .dual_mode (dual_mode),

      .res   (add_res[ggg]),
      .c_out (add_c_out[ggg])
    );

//; if($en_double & !$is_msb) {
  assign carry_out[ggg] = add_c_out[ggg];
//;}
  end

endgenerate

logic [DataWidth-1:0]  add_res_0;
assign add_res_0 = add_res[0];


//; if($en_double & $is_msb) {
assign cmpr_eq   =  ~|(op_a ^ op_b) & (~double_mode | cmpr_eq_in);
//;} else {
assign cmpr_eq   =  ~|(op_a ^ op_b);
//;}



//; my $compare = generate_base('test_cmpr', 'cmpr');
`$compare->instantiate()`
(
  .a_msb     (op_a[DataWidth-1]),
  .b_msb     (op_b[DataWidth-1]),
  .diff_msb  (add_res[0][DataWidth-1]),
  .is_signed (is_signed),
  .eq        (cmpr_eq),

  .lte       (cmpr_lte),
  .gte       (cmpr_gte)
);

//; }


//; if($mult_mode > 0) {
logic                 mult_c_out;

//; my $mult = generate_base('test_mult_add', 'test_mult_add', "use_mad"=>($mult_mode-1));
`$mult->mname()` #(.DataWidth(DataWidth)) `$mult->iname()`
(
  .a  (op_a),
  .b  (op_b),

//  .dual_mode(dual_mode),
//;if($mult_mode > 1) {
  .c  (op_c),
//;}

  .res   (mult_res),
  .c_out (mult_c_out)
);
//;}


//; if ($debug) {
//Enumeration to help with waveforms during simulation
enum {
Add_Op, Sub_Op, Abs_Op, GteMax_Op, LteMin_Op, Eq_Op,
Sel_Op, Rshft_Op, RshftS_Op, Lshft_Op, Mult0_Op, Mult1_Op, Mult2_Op, Or_Op,
And_Op, Xor_Op, Inv_Op, Cntr_Op, Div_Op, InvalidOp
} pe_oper;

always_comb begin
  case (op_code[5:0])
    PE_ADD_OP     : pe_oper = Add_Op;
    PE_SUB_OP     : pe_oper = Sub_Op;
    PE_ABS_OP     : pe_oper = Abs_Op;
    PE_GTE_MAX_OP : pe_oper = GteMax_Op;
    PE_LTE_MIN_OP : pe_oper = LteMin_Op;
    PE_EQ_OP      : pe_oper = Eq_Op;
    PE_SEL_OP     : pe_oper = Sel_Op;
    PE_RSHFT_OP   : pe_oper = Rshft_Op;
    PE_RSHFT_S_OP : pe_oper = RshftS_Op;
    PE_LSHFT_OP   : pe_oper = Lshft_Op;
    PE_MULT_0_OP  : pe_oper = Mult0_Op;
    PE_MULT_1_OP  : pe_oper = Mult1_Op;
    PE_MULT_2_OP  : pe_oper = Mult2_Op;
    PE_OR_OP      : pe_oper = Or_Op;
    PE_AND_OP     : pe_oper = And_Op;
    PE_XOR_OP     : pe_oper = Xor_Op;
    PE_INV_OP     : pe_oper = Inv_Op;
    PE_CNTR_OP    : pe_oper = Cntr_Op;
    PE_DIV_OP     : pe_oper = Div_Op;
    default       : pe_oper = InvalidOp;
  endcase
end
//; }


//; if($use_cntr) {
  assign cntr_en = (op_code[5:0] == PE_CNTR_OP);
//;}

assign is_signed   = op_code[6];
assign double_mode = op_code[7];
assign dual_mode   = op_code[8]; //Save the OP code bit for half precision support

//; if(~$is_msb) {
  assign cmpr_eq_out = cmpr_eq;
//;}

logic diff_sign;

//; if($en_double & $is_msb) {
assign diff_sign = add_res_0[DataWidth-1];

logic [2*DataWidth-1:0] lshift_val;
assign                  lshift_val = ({op_a, op_a_shift} << op_b[4:0]);
//;} elsif($en_double) {
assign diff_sign = double_mode ? res_p_msb : add_res_0[DataWidth-1];
//;} else {
assign diff_sign = add_res_0[DataWidth-1];
//;}


always_comb begin : proc_alu
//; if($use_add > 0) {
  add_a[0] = op_a;
  add_b[0] = op_b;
  add_c_in[0] = 1'b0;

//; if($use_sad) {
  add_a[1] = add_res[0];
  add_b[1] = op_c;
  add_c_in[1] = 1'b0;
//;}

  res_w   = add_res[ADD_MSB];
  res_p_w = add_c_out[ADD_MSB];
//; } else {
  res_w   = 'hX;
  res_p_w = 'hX;
//;}


  case (op_code[5:0])
//; if($use_add > 0) {
    PE_ADD_OP: begin
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : op_d_p;
        add_c_in[1] = double_mode ? carry_in[1] : 1'b0;
//;} else {
        add_c_in[0] = op_d_p;
//;}
        res_p_w     = add_c_out[0];
//; if($use_sad) {
        res_p_w     = add_c_out[0] | add_c_out[1];
//;}
      end
    PE_SUB_OP: begin
        add_b[0]    = ~op_b;
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        add_c_in[1] = double_mode ? carry_in[1] : 1'b0;
//;} else {
        add_c_in[0] = 1'b1;
//;}
      end
    PE_ABS_OP: begin
//; if($use_sad) {
        add_b[0]    = ~op_b;

        add_a[1]    = diff_sign ? ~add_res[0]:add_res[0];
//;   if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        add_c_in[1] = double_mode ? carry_in[1] : diff_sign;
//;   } else {
        add_c_in[0] = 1'b1;
        add_c_in[1] = diff_sign;
//;   }

        res_p_w     = diff_sign;
//;} else {
        add_a[0]    = ~op_a;
        add_c_in[0] = diff_sign;
        res_w       = diff_sign ? add_res[0] : op_a;

        res_p_w     = op_a[DataWidth-1];
//;}
    end

    PE_GTE_MAX_OP: begin
        add_b[0]    = ~op_b;
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        res_p_w     = cmpr_gte;
//;} elsif($en_double) {
        add_c_in[0] = 1'b1;
        res_p_w     = double_mode ? res_p_msb : cmpr_gte;
//;} else {
        add_c_in[0] = 1'b1;
        res_p_w     = cmpr_gte;
//;}
        res_w       = res_p_w ? op_a : op_b;

      end
    PE_LTE_MIN_OP: begin
        add_b[0]    = ~op_b;
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        res_p_w     = cmpr_lte;
//;} elsif($en_double) {
        add_c_in[0] = 1'b1;
        res_p_w     = double_mode ? res_p_msb : cmpr_lte;
//;} else {
        add_c_in[0] = 1'b1;
        res_p_w     = cmpr_lte;
//;}
        res_w       = res_p_w ? op_a : op_b;
      end
    PE_EQ_OP: begin
        res_p_w = cmpr_eq;
        res_w   = op_b;
      end
    PE_SEL_OP: begin
        res_w = op_d_p ? op_a : op_b;
      end
//; }
//; if($use_shift > 0) {
    PE_RSHFT_OP: begin
//; if($en_double & $is_msb) {
        res_w = op_a >> op_b[4:0];
//;} elsif($en_double) {
        res_w =  double_mode ? {op_a_shift, op_a} >> op_b[4:0] : op_a >> op_b[4:0];
//;} else {
        res_w = op_a >> op_b[3:0];
//;}
      end
    PE_RSHFT_S_OP: begin
//; if($en_double & $is_msb) {
        res_w = $signed(op_a) >>> op_b[4:0];
//;} elsif($en_double) {
        res_w =  double_mode ? $signed({op_a_shift, op_a}) >>> op_b[4:0]
                             : $signed(op_a) >>> op_b[4:0];
//;} else {
        res_w = $signed(op_a) >>> op_b[3:0];
//;}
      end
    PE_LSHFT_OP: begin
//; if($en_double & $is_msb) {
        res_w = double_mode ? lshift_val[2*DataWidth-1:DataWidth]
                            : (op_a << op_b[4:0]);
//;} elsif($en_double) {
        res_w = op_a << op_b[4:0];
//;} else {
        res_w = op_a << op_b[3:0];
//;}
      end
//; }
//; if($mult_mode > 0) {
    PE_MULT_0_OP: begin
        res_w   = mult_res[DataWidth-1:0];
        res_p_w = mult_c_out;
      end
    PE_MULT_1_OP: begin
        res_w   = mult_res[3*DataWidth/2-1:DataWidth/2];
        res_p_w = mult_c_out;
      end
    PE_MULT_2_OP: begin
        res_w   = mult_res[2*DataWidth-1:DataWidth];
        res_p_w = mult_c_out;
      end
//; }
//; if($use_bool) {
    PE_OR_OP: begin
        res_w = op_a | op_b;
      end
    PE_AND_OP: begin
        res_w = op_a & op_b;
      end
    PE_XOR_OP: begin
        res_w = op_a ^ op_b;
      end
    PE_INV_OP: begin
        res_w = ~op_a;
      end
//; }
//; if($use_cntr) {
    PE_CNTR_OP: begin
//; if($use_sad) {
        add_a[0]    = op_a;
//; } else {
        add_a[0]    = 'h1;
//;}
        add_b[0]    = op_b;
        add_c_in[0] = 1'b0;

        res_w       = op_b; // Current counter value
        cntr_next   = add_res[0];
//; if($use_sad) {
        res_p_w     = ~|(op_b ^ op_c); // Done counting
//; } else {
        res_p_w     = ~|(op_b ^ op_a); // Done counting
//;}
      end
//; }

//; if($use_div) {
    PE_DIV_OP: begin
//; if($is_msb) {
        add_a[0]    = {op_a[DataWidth-2:0], div_low_msb[1]};
        add_b[0]    = ~op_b;
        add_c_in[0] = 1'b1;

        div_co      = ~add_res[0][DataWidth-1] ? add_res[0] : {op_a[DataWidth-2:0], div_low_msb[1]};
        res_w       = ~div_ci[DataWidth-1] ? div_ci : {div_co[DataWidth-2:0], div_low_msb[0]};
        res_p_w     = add_res[0][DataWidth-1];
//;} else {
        add_a[0]    = {div_ci[DataWidth-2:0], op_a[DataWidth-2]};
        add_b[0]    = ~op_b;
        add_c_in[0] = 1'b1;

        div_co      = add_res[0];

        res_w       = {op_a[DataWidth-3:0], ~res_p_msb, ~div_co[DataWidth-1]} ;
//;}
      end
//; }

    default: begin
        res_w   = op_a;
        res_p_w = op_d_p;
      end
  endcase
end


assign res   = res_w;
assign res_p = res_p_w;

endmodule




