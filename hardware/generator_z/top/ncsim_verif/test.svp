/* *****************************************************************************
 * File: test.v
 * Author: Ofer Shacham
 * 
 * Description:
 * simple test bench for template
 * 
 *
 * Change bar:
 * -----------
 * Date          Author   Description
 * Apr 3, 2010  shacham  initial version
 *  
 * 
 * ****************************************************************************/

////////////////////////////// IMPORTANT MESSAGE: //////////////////////////////
// Note that programs are written using object oriented programming. They
// are closer to software than to hardware. There is therefore no real need
// in a genesis type parameterization.
////////////////////////////////////////////////////////////////////////////////
//; my $num_tracks = $self->get_top_param('num_tracks');
//; my $use_bs = parameter(NAME => 'use_bs', val => 0);
//; my $use_input_file = parameter(NAME => 'use_input_file', val=> 0);
//; my $config_bs = parameter(NAME => 'config_bs', val => 'conv_2_1.bs', DOC => "Bitstream to configure CGRA");
//; my $input_file = parameter(NAME => 'input', val => '../../../verilator/generator_z_tb/io/conv_bw_in.png', DOC => "Input image to use for test");

program automatic `mname`(
	interface ifc,//JTAG Interface
	inout logic [`$num_tracks-1`:0] pads_S0,
	inout logic [`$num_tracks-1`:0] pads_S1,
	inout logic [`$num_tracks-1`:0] pads_S2,
	inout logic [`$num_tracks-1`:0] pads_S3
);
   parameter io1bit_num_features=1;
   parameter io16bit_num_features=1;
   parameter mem_num_features=17;
   parameter pe_num_features=11;
   // some variables to control the test
   //int                           seed;
   //int                           rnd0;
   logic [`$num_tracks-1`:0] in;
   logic [`$num_tracks-1`:0] S2_in;
   assign pads_S2 = S2_in;  
   int 				 fd;
   int 				 config_file;
   int				 input_file;
   int 				 io1bit_IDs;
   int				 pe_IDs;
   int				 mem_IDs;
   int 				 io1bit_ID_arr[3000];
   int 				 pe_ID_arr[3000];
   int 				 mem_ID_arr[3000];
   shortint			 id;
   int				 status;
   int				 i;
   int 				 flag;
   logic [31:0]			 config_data;
   logic [31:0]			 config_addr;
   logic [7:0]			 pads_in_char;
   // Instantiate a jtag driver
   //; my $jtag_drvr_obj = generate_base('JTAGDriver', 'jdrv');
   `$jtag_drvr_obj->instantiate`;
   jtag_regfile_trans_t jtag_config_trans;       
   logic [8:0][7:0] pe_regs= {8'h00,8'hE0,8'hE1,8'hF0,8'hF1,8'hF3,8'hF4,8'hF5,8'hFF};
   task run_test;
      begin
	 jdrv.ReadID(jtag_config_trans);
	//Begin CGRA configuration
	 // initialization of structs:
	 jtag_config_trans.domain = sc_domain;
	 jtag_config_trans.addr = 32'h0;
	 jtag_config_trans.data_out = 32'h1;
	 //CHECK EVERY ADDRESS IN EACH TILE TYPE
	 GC_op(write_stall,32'hF,32'h0);
	 $display("STALL");
	 $display("START ALL FEATURE TEST FOR EACH TILE TYPE");
	 //io1bit tile
	 status = $fscanf(io1bit_IDs,"%x", id);
	 io1bit_ID_arr[0] = id;
	 write_config(id,8'h0,8'h0,32'h1);
	 //Now do mem_tile
	 status = $fscanf(mem_IDs,"%x", id);
	 mem_ID_arr[0] = id;
	 for(int feat=0; feat<mem_num_features; feat++) begin
		if(feat==10)
			write_config(id,feat,8'h0,(id+feat)%4);
		else
			write_config(id,feat,8'h0,(id+feat));
         end
	 status = $fscanf(pe_IDs,"%x", id);
	 pe_ID_arr[0] = id;
	 for(int feat=0; feat<pe_num_features; feat++) begin
		if(feat==0) begin
			for(int r=0;r<9;r++) begin
				if(pe_regs[r]=='hF3 | pe_regs[r]=='hF4 | pe_regs[r]=='hE1) begin
					write_config(id,feat,pe_regs[r],32'h1);
				end
				else	
					write_config(id,feat,pe_regs[r],r);
			end
		end
		else if(feat==10)
			write_config(id,feat,8'h0,1);
		else if(feat!=1)
			write_config(id,feat,8'h0,(id+feat));
         end
	 $display("START ALL FEATURE TEST FOR EACH TILE TYPE");
	 $display("TESTING IO1BIT TILE");
	 id = io1bit_ID_arr[0];
	 check_address(id,8'h0,8'h0,32'h1);
	 //Now do mem_tile
	 $display("TESTING MEM TILE");
	 id = mem_ID_arr[0];
	 for(int feat=0; feat<mem_num_features; feat++) begin
		if(feat==10)
			check_address(id,feat,8'h0,(id+feat)%4);
		else
			check_address(id,feat,8'h0,(id+feat));
         end
	 $display("TESTING PE TILE");
	 id = pe_ID_arr[0];
	 for(int feat=0; feat<pe_num_features; feat++) begin
		if(feat==0) begin
			for(int r=0;r<9;r++) begin
				if(pe_regs[r]=='hF3 | pe_regs[r]=='hF4 | pe_regs[r]=='hE1) begin
					check_address(id,feat,pe_regs[r],32'h1);
				end
				else	
					check_address(id,feat,pe_regs[r],r);
			end
		end
		else if(feat==10)
			check_address(id,feat,8'h0,1);
		else if(feat!=1)
			check_address(id,feat,8'h0,(id+feat));
         end
	 $display("ALL FEATURE TESTING COMPLETE");
	 
	 	 

//; if($use_bs==1) {
	 @(posedge ifc.Clk);
	 jtag_config_trans.op = write_stall;
	 jtag_config_trans.data_in = 32'hF;
	 jdrv.Send(jtag_config_trans);
	 $display("STALL");
	 status = 2;
	 while( status==2 ) begin
		@(posedge ifc.Clk);
		status = $fscanf(config_file,"%x %x", config_addr,config_data);
		$display("%x %x",config_addr,config_data);
		jtag_config_trans.data_in = config_data;
		jtag_config_trans.addr = config_addr;
		jtag_config_trans.op = write;
		jdrv.Send(jtag_config_trans);
	 end
	 //SWITCH TO FAST CLK
	 $display("Finished Configuration!");
	 jtag_config_trans.op = switch_clk;
	 jtag_config_trans.data_in = 32'h1;
	 jdrv.Send(jtag_config_trans);
	 $display("SWITCH TO FAST CLK");

	 //UNSTALL
	 jtag_config_trans.op = write_stall;
	 jtag_config_trans.data_in = 32'h0;
	 jdrv.Send(jtag_config_trans);
	 $display("UNSTALL");
//; }
//; if($use_input_file == 1){
	 //NOW WE CAN APPLY THE INPUTS TO THE PADS
	 while( !$feof(input_file) )being
		@(posedge ifc.Clk);
		pads_in_char = $fgetc(input_file);
		pads_S2[7:0] =8'b0;
		//REVERSE THE BITS
		for(i=0; i<8; i++)
			pads_S2[15-i] = pads_in_char[i];	
	 end
//; }
//; else {
	 for(int j=0; j<40; j++) begin
		@(posedge ifc.Clk);
		//in = $urandom_range(65535,0);
                in = 0;
		for(i=0; i<`$num_tracks`; i++)
			S2_in[`$num_tracks-1`-i] = in[i];	
	 end
//; }
      end
   endtask // run_test
   task write_config(input logic [15:0] tile_id, input logic [7:0] feature, input logic [7:0] register,input logic [31:0] data_in);
     begin
     jtag_config_trans.op = write;
     jtag_config_trans.addr = {register,feature,tile_id};
     jtag_config_trans.data_in = data_in;
     jtag_config_trans.done = 0;
     jdrv.Send(jtag_config_trans);
     end
   endtask //write_config
   task read_config(input logic [15:0] tile_id, input logic [7:0] feature, input logic [7:0] register);
     begin
     jtag_config_trans.op = read;
     jtag_config_trans.addr = {register,feature,tile_id};
     jtag_config_trans.data_out = 0;
     jtag_config_trans.done = 0;
     jdrv.Send(jtag_config_trans);
     jtag_config_trans = jdrv.GetResult();
     end
   endtask //read_config
   task check_address(input logic [15:0] tile_id, input logic [7:0] feature, input logic [7:0] register, input logic [31:0] data_in);
     begin
     //@(posedge ifc.Clk);
     //write_config(tile_id,feature,register, data_in);
     @(posedge ifc.Clk);
     read_config(tile_id,feature,register);
     if(jtag_config_trans.data_out != data_in) begin
       $display("ERROR in tile %x, feature %x, register %x. Data written: %x. Data read: %x.", tile_id,
                 feature, register,data_in,jtag_config_trans.data_out);
     end
     end
   endtask
   task GC_op(input regfile_op_t op, logic[31:0] data_in, logic[31:0] addr);
     begin
     @(posedge ifc.Clk);
     jtag_config_trans.op = op;
     jtag_config_trans.addr = addr;
     jtag_config_trans.data_in = data_in;
     jtag_config_trans.data_out = 0;
     jtag_config_trans.done = 0;
     jdrv.Send(jtag_config_trans);
     jtag_config_trans = jdrv.GetResult();
     end
   endtask 


   /****************************************************************************
    * Control the simulation
    * *************************************************************************/
   initial begin
      $display("%t:\t********************Loading Arguments***********************",$time);
      init_test;
      fd = $fopen("test.log","w");
//; if($use_bs == 1) {     
      config_file = $fopen("`$config_bs`","r");
      if(!config_file)
	$display("ERROR: Could not open `$config_bs`");	
//; } 
//; if($use_input_file == 1){
      input_file = $fopen("`$input_file`","r");
      if(!input_file)
	$display("ERROR: Could not open `$input_file`");
//; }

      io1bit_IDs = $fopen("io1bit_IDs.txt","r");
      if(!io1bit_IDs)
	$display("ERROR: Could not open io1bit_ID file");
      
      pe_IDs = $fopen("pe_IDs.txt","r");
      if(!pe_IDs)
	$display("ERROR: Could not open pe_ID file");
      
      mem_IDs = $fopen("memory_IDs.txt","r");
      if(!mem_IDs)
	$display("ERROR: Could not open mem_ID file");

      $display("%t:\t*************************START*****************************",$time);
      @(negedge ifc.Reset);
      repeat (10) @(posedge ifc.Clk);
      run_test;
      repeat (10) @(posedge ifc.Clk);
      $display("%t:\t*************************FINISH****************************",$time);
      $fclose(fd);
      $finish(2);
   end
   
   
   task init_test();
      begin
	 // read user input
	 //ProcessArgs();
	 //rnd0 = $random(seed); // initial the random number generator
	 
	 // init the environment
	 jdrv = new(ifc);
	 jdrv.Zero();
	
 	 //ZERO out any inputs to the DUT
	 ifc.config_data_from_gc = '0;
	 repeat (2) @(posedge ifc.Clk); 
      end
   endtask // init_test
   
   /****************************************************************************
    * Other Tasks:
    * *************************************************************************/
/*
   task ProcessArgs;
      begin
         // if this is a "+wave" run, it must record all signals
         if ( $test$plusargs("wave") ) begin
            //         levels  instance
            $display("time=%10t Starting Wave Capture", $time);
            $vcdpluson(0,        top);
         end
         // if this is a "+memwave" run, it must record all memories
         if ( $test$plusargs("memwave") ) begin
            //         levels  instance
            $display("time=%10t Starting Memories Capture", $time);
            CaptureMemoriesOn();
         end
         // find the seed for this run
         if ( $test$plusargs("seed") ) begin
	    $value$plusargs("seed=%d", seed);
	 end else begin
            seed = 12345;
         end
	 $display("%t: Using seed %d",$time, seed);
      end
   endtask // ProcessArgs
   
   task CaptureMemoriesOn;
      begin
         $vcdplusmemon(0,        top);
      end
   endtask // CaptureMemoriesOn
   
   task CaptureMemoriesOff;
      begin
         $vcdplusmemoff(0,        top);
      end
   endtask // CaptureMemoriesOff
  */ 
endprogram : `mname`
  
