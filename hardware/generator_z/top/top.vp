// New Top level that contains CGRA_core module and IO pad_ring module
//; #TOP LEVEL PARAMS
//; my $num_ios_per_side = parameter(name=>'num_ios_per_side', val=>16, min=>16, step=>16);
//; #Other values
//; my $num_ios_per_group = 16;
//; my $groups_per_side = $num_ios_per_side/$num_ios_per_group;
//; my @sides = ('N','S','E','W');

module `mname` (
  //pads_{side}_{group_num_within_side} [bit number within group]
//; for (my $i=0; $i<$groups_per_side; $i++) {
  inout [`$num_ios_per_group-1`:0] pads_N_`$i`,
  inout [`$num_ios_per_group-1`:0] pads_S_`$i`,
  inout [`$num_ios_per_group-1`:0] pads_E_`$i`,
  inout [`$num_ios_per_group-1`:0] pads_W_`$i`,
//; }
  input tck,
  input tms,
  input trst_n,
  input tdi,
  output tdo,
  input clk,
  input reset
);


//; for (my $i=0; $i < $num_groups_per_side; $i++) {
//;   for my $side (@sides) {
  wire [`$num_ios_per_group-1`:0] f2p_wide_`$side`_`$i`;
  wire [`$num_ios_per_group-1`:0] f2p_1bit_`$side`_`$i`;
  wire [`$num_ios_per_group-1`:0] p2f_`$side`_`$i`;
//;   }
//; }


//; my $cgra_core_obj = generate_base("cgra_core","core");

  `$cgra_core_obj->instantiate()` (
//; for (my $i=0; $i < $num_groups_per_side; $i++) {
//;   for my $side (@sides) {
    .f2p_wide_`$side`_`$i`(f2p_wide_`$side`_`$i`),
    .f2p_1bit_`$side`_`$i`(f2p_1bit_`$side`_`$i`),
    .p2f_`$side`_`$i`(),
//;   }
//; }
    .clk(clk),
    .reset(reset)

  );

//; my $pad_ring_obj = generate_base("pad_ring", "pads");

  `$pad_ring_obj->instantiate()` (

//; for (my $i=0; $i < $num_groups_per_side; $i++) {
//;   for my $side (@sides) {
    .f2p_wide_`$side`_`$i`(f2p_wide_`$side`_`$i`),
    .f2p_1bit_`$side`_`$i`(f2p_1bit_`$side`_`$i`),
    .pads_`$side`_`$i`(pads_`$side`_`$i`),
    .p2f_`$side`_`$i`(p2f_`$side`_`$i`),
//;   }
//; }
    .config_data(),
    .config_addr(),
    .config_read(),
    .config_write(),
    .read_data(),
    .clk(clk),
    .reset(reset)
  );

endmodule
