// New Top level that contains CGRA_core module and IO pad_ring module
//; #TOP LEVEL PARAMS
//; my $num_ios_per_side = parameter(name=>'num_ios_per_side', val=>16, min=>16, step=>16);
//; #Other values
//; my $num_ios_per_group = 16;
//; my $groups_per_side = $num_ios_per_side/$num_ios_per_group;
//; my @sides = ('N','S','E','W');

module `mname` (
  //pads_{side}_{group_num_within_side} [bit number within group]
//; for (my $i=0; $i<$groups_per_side; $i++) {
  inout [`$num_ios_per_group-1`:0] pads_N_`$i`,
  inout [`$num_ios_per_group-1`:0] pads_S_`$i`,
  inout [`$num_ios_per_group-1`:0] pads_E_`$i`,
  inout [`$num_ios_per_group-1`:0] pads_W_`$i`,
//; {
  input tck,
  input tms,
  input trst_n,
  input tdi,
  output tdo,
  input clk,
  input reset
);

//; my $cgra_core_obj = generate_base("cgra_core","core");

  `$cgra_core_obj->instantiate()` (
    .wide_IO_N(),
    .wide_IO_S(),
    .wide_IO_E(),
    .wide_IO_W(),
    .clk(clk),
    .reset(reset)

  );

//; my $pad_ring_obj = generate_base("pad_ring", "pads");

  `$pad_ring_obj->instantiate()` (
    .pads_N(pads_N),
    .pads_S(pads_S),
    .pads_E(pads_E),
    .pads_W(pads_W),
    .
    .config_data(),
    .config_addr(),
    .config_read(),
    .config_write(),
    .read_data(),
    .clk(clk),
    .reset(reset)
  );

endmodule
